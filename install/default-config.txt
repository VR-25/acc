configVerCode=202206010

capacity=(-1 60 70 75 false false)

temperature=(40 60 90 65)

cooldownRatio=()
cooldownCurrent=
cooldownCustom=()

resetBattStats=(false false false)

chargingSwitch=()

applyOnBoot=()

applyOnPlug=()

maxChargingCurrent=()

maxChargingVoltage=()

language=

runCmdOnPause=''

ampFactor=
voltFactor=

loopCmd=''

prioritizeBattIdleMode=false
currentWorkaround=false
battStatusWorkaround=true

schedule=''

battStatusOverride=''

rebootResume=false

: one-line script sample; echo nothing >/dev/null


# UYARILAR

# Windows Notepad ile bu dosyayı düzenlemeyin, asla!
# Dosya sonundaki (Linux/Unix) bitişini CRLF (Windows) ile değiştiriyor.

# Muhtemelen tahmin ettiğiniz üzere, varsayılan olarak "null" (boş) olan şey, boş bırakılabilir.
# "language=" ile "language=en" eşdeğerdir.
# Boş bırakılmaması gereken yerleri boş bırakmak beklenmedik durumlara yol açabilir.
# Ancak "--set var=" komutu 'var' değeri için varsayılan değeri geri yükler.
# Başka bir deyişle, normal kullanıcılar için, "--set" komutu config(ayarlar) dosyasını direkt düzenlemekten daha güvenlidir.

# Her şeyi ayarlamanız/değiştirmeniz lazım gibi düşünmeyin!
# Anlamadığınız şeyi değiştirmeyin.


# NOTES

# Bu dosyada bir değişlik yapıldıktan sonra daemon yeniden başlatılmak zorunda değilsiniz  - istisna -> 'charging_switch'.

# current_workaround (cw) değişkenine girdiğiniz yeni değerler acc yeniden başladığında aktif hale gelir (yükleme, güncelleme veya "accd --init") veya sistemi
yeniden başlatın.

# Eğer bu 2 değişken "acc --set" (acca --set değil) ile değiştirildi ise, accd otomatik yeniden başlatılır (--init komutu uygulanır, gerektiği üzere).

# Boş olarak bırakılabilecek tek değerler varsayılan(default) olarak boş halde verilenlerdir (var=, var="" and var=()).


# TEMELLER

# capacity=(shutdown_capacity cooldown_capacity resume_capacity pause_capacity capacity_sync capacity_mask)

# temperature=(cooldown_temp max_temp max_temp_pause shutdown_temp)

# cooldownRatio=(cooldown_charge cooldown_pause)

# cooldownCustom=cooldown_custom=(file raw_value charge_seconds pause_seconds)

# cooldownCurrent=cooldown_current=[milliamps]

# resetBattStats=(reset_batt_stats_on_pause reset_batt_stats_on_unplug reset_batt_stats_on_plug)

# chargingSwitch=charging_switch=(ctrl_file1 on off ctrl_file2 on off --)

# chargingSwitch=charging_switch=(milliamps)

# chargingSwitch=charging_switch=(3700-4300 millivolts)

# applyOnBoot=apply_on_boot=(ctrl_file1::value[::default] ctrl_file2::value[::default] ... --exit)

# applyOnPlug=apply_on_plug=(ctrl_file1::value[::default] ctrl_file2::value[::default] ...)

# maxChargingCurrent=max_charging_current=([value] ctrl_file1::value::default ctrl_file2::value::default ...)

# maxChargingVoltage=max_charging_voltage=([value] ctrl_file1::value::default ctrl_file2::value::default ...) --exit)

# maxChargingCurrent=max_charging_current=([value] ctrl_file1::value::default1 ctrl_file2::value::default2 ...)

# maxChargingVoltage=max_charging_voltage=([value] ctrl_file1::value::default1 ctrl_file2::value::default2 ...) --exit)

# language=lang=language_code

# runCmdOnPause=run_cmd_on_pause='command...'

# ampFactor=amp_factor=[multiplier]

# voltFactor=volt_factor=[multiplier]

# loopCmd=loop_cmd='command...'

# prioritizeBattIdleMode=prioritize_batt_idle_mode=boolean

# currentWorkaround=current_workaround=boolean

# battStatusWorkaround=batt_status_workaround=boolean

# schedule=sched='HHMM command...
# HHMM command...
# ...'

# battStatusOverride=batt_status_override=Idle|Discharging|'code to PRINT value for _status'

# rebootResume=reboot_resume=boolean


# ALIASES/SHORTCUTS

# cc cooldown_capacity
# rc resume_capacity
# pc pause_capacity
# cs capacity_sync
# cm capacity_mask

# sc shutdown_capacity
# ct cooldown_temp
# cch cooldown_charge
# cp cooldown_pause

# mt max_temp
# mtp max_temp_pause

# st shutdown_temp

# ccu cooldown_custom
# cdc cooldown_current

# rbsp reset_batt_stats_on_pause
# rbsu reset_batt_stats_on_unplug
# rbspl reset_batt_stats_on_plug

# s charging_switch

# ab apply_on_boot
# ap apply_on_plug

# mcc max_charging_current
# mcv max_charging_voltage

# l lang
# rcp run_cmd_on_pause

# af amp_factor
# vf volt_factor

# lc loop_cmd

# pbim prioritize_batt_idle_mode
# cw current_workaround
# bsw batt_status_workaround

# sd sched

# bso batt_status_override
# rr reboot_resume


# TAMAM DA, BÜTÜN BUNLAR NE DEMEK?

# configVerCode #
# Bu güncellemeler sırasında config(ayarlar) dosyasının değiştirilip değiştirilmemesi gerektiğini anlamak için kullanılır. Değişiklik YAPMAYIN.

# shutdown_capacity (sc) #
# Batarya deşarj oluyor ve seviyesi <= sc  değeri ise, acc daemon deşarj hızını düşürmek ve fazla düşük voltajın bataryaya verebileceği olası etkileri
azaltmak için telefonu kapatır.
# Devre dışı bırakmak için sc=-1.

# cooldown_capacity (cc) #
# Soğutma döngüsünün başlatıldığı seviyedir (cc).
# Soğutma işlemi, yüksek sıcaklık ve voltajın batarya üstüne bindirdiği yükü azaltır.
# Bunu periodik olarak şarjı birkaç saniyeliğine keserek yapar (daha fazla detay için aşağıya bakın).

# resume_capacity (rc) #
# Şarjın yeniden başlatılacağı batarya seviyesi.

# pause_capacity (pc) #
# Şarjın durdurulacağı batarya seviyesi.

# capacity_sync (cs) #
# Bazı cihazlar, özellikle Pixel sınıfından olanlar, Android ve kernel arasında batarya ile ilgili bazı tutarsızlıklara sahipler.
# capacity_sync Anroid sistemini kernel tarafından sağlanan batarya seviyesini göstermeye zorlar.
# The discrepancy is usually detected and corrected automatically by accd.
# Bu ayar otomatik davranışı yok sayar/geçersiz kılar.
# (cs.2) - Bunun yanında Android'in 2% altında değerler göstermesini engeller, bunun sebebi bazı sistemlerin kernel batarya değeri 0% olmadan önce kapanmasıdır.

# capacity_mask (cm) #
# bkz. capacity_sync.
# Bu değişken Android'i "capacity = capacity * (100 / pause_capacity)" değerini göstermeye zorlar. Uzun lafın kısası örneğin
cihazınızı şarj 70%'de dursun diye ayarladınız, şarj bu seviyeye geldiğinde sanki dolmuş (100%) gibi gösteriyor.
# bkz (cs.2) - (yukarıda)

# cooldown_temp (ct) #
# Soğutma döndüsünün (bkz. cs) (°C) başladığı sıcaklık.
# Soğutma işlemi cihazın sıcaklığını düşürerek deşarj olma hızını azaltır.
# Daha fazla bilgi için (bkz. cooldown_capacity).

# max_temp (mt) #
# mtp or max_temp_pause #
# Bu ikisi birlikte çalışırlar ve soğutma işlemi ile (bkz. cs) bağlantıları YOKTUR.
# Cihazın sıcaklığı max_temp (°C) derecesine geldiğinde, şarj 'max_temp_pause (saniye)' kadar durdurulur.
# Hem yüksek sıcaklığı hem yüksek voltajı önlemeye çalışan soğutma döngüsünün aksine - bu değişken YALNIZCA sıcaklığı
düşürmeyi amaçlar.
# Soğutma döngüsü ile direkt bağlantılı olmasa da çevre sıcaklığı çok yüksek olduğunda ona yardımcı olur.

# shutdown_temp (st) #
# Cihazı kapat, eğer sıcaklığı >= bu değer(st) ise.

# cooldown_charge (cch) #
# cooldown_pause (cp) #
# Bu ikisi soğutma döngüsünün aralıklarını (saniye) ayarlar.
# Eğer ayarlanmadılarsa, döngü devre dışı kalır.
# Tavsiye edilen değerler cch=50 ve cp=10.
# Eğer çok yavaş şarj oluyorsa, cch=50 ve cp=5 değerlerini deneyin.
# cooldown_capacity(cc) ve cooldown_temp(ct) normal koşullar altında asla ulaşılamayacak absürt değerler verilerek de etkisiz
hale getirilebilir.

# cooldown_custom (ccu) #
# Eğer cooldown_capacity ve/veya cooldown_temp ihtiyaçlarınıza uymuyorsa, bu iş görebilir.
# Varsayılan soğutma döngüsü ayarlarını yok sayar/onlardan önceliklidir.

# cooldown_current (cdc) #
# Soğutma işlemi sırasında şarj işlemini periodik olarak kesmek yerine, maksimum izin verilen şarj akımını kısıtlar(örneğin 500mA)

# reset_batt_stats_on_pause (rbsp) #
# Şarjın ardından batarya istatistiklerini sıfırlar.

# reset_batt_stats_on_unplug (rbsu) #
# Eğer şarj kablosu birkaç saniyeliğine çıkartıldı ise batarya istatistiklerini sıfırlar.

# reset_batt_stats_on_plug (rbspl) #
# Eğer şarj kablosu birkaç saniyeliğine takıldı ise batarya istatistiklerini sıfırlar.

# charging_switch (s) #
# Eğer belirtilmedi ise, acc şarjı devre dışı bırakabilen ilk portu seçer.
# Eğer port düzgün çalışmıyor ise, seçili olan portu bırakıp yukarıdaki işlemi tekrarlar.
# Eğer bütün portal şarjı devre dışı bırakma konusunda başarısız ise, chargingSwitch ayarlanmaz ve acc/d hata kodu 7 ile
çıkış yapar.
# Bu otomatik işlem "charging_switch=..." kısmının başına " --" ekleyerek devre dışı bırakılabilir.
# e.g., acc -s s="battery/charge_enabled 1 0 --"
# acc -ss komutu her zaman " --" kendisi ekler.
# charging_switch=milliamps (e.g., 0-250) şarj akım kontrolünü etkinleştirir.
# Eğer charging_switch 3700-4300 (milivolts) değerine ayarlanırsa, acc voltajı kısıtlayarak şarjı durdurur.
# Detaylar için, bkz. 'readme' dosyası /Tavsiyeler bölümü.
# Yukarıdaki orijinal varyanta kıyasla, bu otomatik olarak devre dışı kalmaz.
# Bu yüzden başına " --" koymanıza gerek yoktur.
# Bu değişken ile oynama yapıldıktan sonra daemon yeniden başlatılmalıdır (komut "acc --set").

# apply_on_boot (ab) #
# Sistem açılışında/başlangıcında uygulanan daemon kodları.
# --exit opsiyonu (bkz. applyOnBoot=...) gerekli ayarlar yapıldıktan sonra daemon modülünü durdurur.
# Eğer --exit flag opsiyonu kullanılmamış ise, daemon durduğunda varsayılan değerler tekrar yüklenir.

# apply_on_plug (ap) #
# Şarj kablosu takıldığında uygulancak olanlar
# Böyle bir değişken var çünkü /sys files (e.g., current_max) içindeki bazı değerler kablo takıldığında sıfırlanıyor.
# daemon durduğunda varsayılan değerler tekrardan yüklenir.

# max_charging_current (mcc) #
# max_charging_voltage (mcv) #
# Yalnızca akım/voltaj değeri giriniz.
# Control dosyaları otomatik olarak seçilir.

# lang (l) #
# acc dili, "acc --set --lang" (acc -sl) kullanılarak değiştirilebilir.
# Eğer null(boş) ise, English (en) yazılmış kabul edilir.

# run_cmd_on_pause (rcp) #
# Şarj durduktan sonra bir şey çalıştırın.
# * Genellikle bir script ("sh some_file" veya ". some_file")

# amp_factor (af) #
# volt_factor (vf) #
# Referans için birim çevirimi (e.g., 1V = 1000000 Microvolts)
# ACC birimi otomatik olarak algılayabilir, ancak her zaman 100% kusursuz değildir.
# e.g., eğer girilen akım değeri çok düşük ise, birim yanlış hesaplanabilir.
# Ancak nadir bir hatadır.
# Her şey düzgün çalıyorsa bu değerler ile oynamayın.

# loop_cmd (lc) #
# accd'nin kullanılabilirliğini arttırmak amacı ile yapıldı. (bu kısmı İngilizce anlamıyorsanız sizlik bir şey söz konusu değil
geçebilirsiniz)
# It is periodically executed by the is_charging function -- which is called regularly, within the main accd loop.
# The boolean isCharging is available.
# Refer back to COMMAND EXAMPLES.

# prioritize_batt_idle_mode (pbim) #
# Eğer aktif edilirse Idle mod desteklenmesi durumunda ona öncelik verilir.
# Yalnızca charging_switch seçilmediği zaman kullanılır.
# Bu Samsung cihazlarda problem yarattığı için default(varsayılan) olarak devre dışıdır.

# current_workaround (cw) #
# Only use current control files whose paths match "batt" (default: false).
# Bu değer yalnızca şarj limitleri hem giriş hem de şarj akımını etkiliyorsa gereklidir.
# Eğer düşük akım değerleri çalışmıyor ise bunu deneyin.
# Değiştirdikten sonra "accd --init" komutu gereklidir ("acc --set" tarafından otomatize de edilebilir).

# batt_status_workaround (bsw) #
# Bu değer etkin ise, 'POWER_SUPPLY_STATUS' değerinin yanında, eğer batarya "Charging(şarj edilme)" durumunda ise ve akım değeri -11 ve 95 mA (uçlar dahil olmak üzere) aralığında ise, batarya "Idle" modda kabul edilir. Disable_charhing fonskiyonu çağırılıktan sonra, eğer akım değeri fazla düşerse, statü "Discharging(deşarj)" durumuna düşer.
# Sadece POWER_SUPPLY_STATUS değerinden alınan sonuca bağlı kalınmadığı için, bu değer uyumluluğu önemli derecede arttırır. O kadar ki, bazı cihazlarda (mesela, Nokia 2.2), acc yalnızca bu değer aktif iken çalışır.
# Öteki taraftan, cihazınız yanlış akım değerleri gösteriyorsa ve akımda fazla dalgalanma var ise şarj kontrolünde sıkıntılar yaşanabilir.
# Çoğunlukla, bu sıkıntılar adaptör kaynaklıdır.

# sched (sd) # (eğer düzenli olarak çalıştırmak istediğiniz komutlar varsa)
# Command/script schedules, in the following format:
#
# sched="HHMM command...
# HHMM command...
# ..."
#
# e.g., 3900 mV at 22:00, and 4100 mV at 6:00, daily:
# sched="2200 acc -s mcv=3900
# 0600 acc -s mcv=4100"
#
# 12 saat formatı desteklenmiyor.
# Her bir profil(schedule) kendi satırında olmalı.
# Her satır daemon tarafından işleme alınır.
# Bu acc komutlarına bağlı değildir, her şeyi çalıştırabilir.
#
# Commands:
#   -s|--set [sd|sched]="[+-]schedule to add or pattern to delete"
#     e.g.,
#       acc -s sd=-2050 (delete schedules that match 2050)
#       acc -s sd="+2200 acc -s mcv=3900 mcc=500; acc -n "Switched to \"sleep\" profile" (append schedule)
#     Not: "acc -s sd=" aynı diğer basit komutlar gibi çalışır (varsayılan değeri yükler; varsayılan değer: null, profiller için)

# batt_status_override (bso) # (Eğer kalan kısımları İngilizce anlayamıyorsanız çok bulaşmanıza gerek yok, fazlası ile teknik)
# Overrides the battery status determined by the not_charging function.
# It can be Idle, Discharging (both case sensitive), or logic to PRINT the desired value for the _status variable.
# When set to Idle or Discharging, _status will be set to that value if the enforced* charging switch state is off.
# It only works in conjunction with an enforced charging switch (set manually, has a trailing " --").
#
# Usage scenario: the switch "main/cool_mode 0 1" supports idle mode. However, sometimes it does not respond soon enough (e.g., due to fast charging). The user can then enforce it with acc -ss and set batt_status_override=Idle. This means, when main/cool_mode is on (0), _status will be determined by the not_charging function (as usual), but when it's off (1), _status will be Idle, bypassing the not_charging function.
#
# If the user were to write their own logic, it would've be something as follows:
# batt_status_override='[ $(cat main/cool_mode) -eq 1 ] && printf Idle'

# reboot_resume (rr) #
# Reboot (when capacity <= resume_capacity) to re-enable charging.
# A warning notification is posted 60 seconds prior, for the user to block the action, if they so please.

# one-line scripts #
# Every line that begins with ": " is interpreted as a one-line script.
# This feature can be useful for many things, including setting up persistent config profiles (source a file that overrides the main config).
# All script lines are executed whenever the config is loaded/sourced.
# This happens regularly while the daemon is running, and at least once per command run.
# Warning: all files used in one-line scripts must reside somewhere in /data/adb/, just like acc's own data files.
